{"version":3,"sources":["Components/Header.js","Components/Pics.js","App.js","services/fetchPics.js","serviceWorker.js","index.js"],"names":["Header","className","Pics","props","pics","map","item","key","id","src","download_url","alt","author","App","state","nRandom","getPics","bind","getRandom","this","newNRandom","Math","random","setState","url","ENDPOINT","parseInt","console","log","fetch","then","response","json","data","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAWeA,EARA,WACb,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,SAAd,eCmBSC,EAtBF,SAACC,GAAW,IAChBC,EAAQD,EAARC,KACL,OACE,yBAAKH,UAAU,mBACb,wBAAIA,UAAU,cACbG,EAAKC,KAAI,SAAAC,GACR,OACE,wBAAIL,UAAU,YAAYM,IAAKD,EAAKE,IAClC,yBAAKP,UAAU,WAAWQ,IAAKH,EAAKI,aAAcC,IAAG,qBAAgBL,EAAKM,UAC1E,wBAAIX,UAAU,eAAeK,EAAKM,eCsCjCC,G,kBA3Cb,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KACDW,MAAM,CACTV,KAAK,GACLW,QAAQ,IAEV,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAPD,E,iFAUhBE,KAAKD,c,kCAEK,IAAD,OACHE,EAAa,GAAAC,KAAKC,SAAuB,GAC/CH,KAAKI,SAAS,CACZR,QAAQK,IACR,WAAK,EAAKJ,e,gCAGJ,IC1BOQ,ED0BR,OACDC,EAAQ,6CAAwCC,SAASP,KAAKL,MAAMC,SAA5D,aACdY,QAAQC,IAAIH,IC5BGD,ED6BLC,EC7BaI,MAAOL,GAAMM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WD8B7DF,MAAK,SAAAG,GACJ,EAAKV,SAAS,CACZnB,KAAK6B,IACL,WAAKN,QAAQC,IAAI,EAAKd,MAAMV,c,+BAIzB,IACAA,EAAMe,KAAKL,MAAXV,KACP,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,CAAMG,KAAMA,U,GArCH8B,IAAMC,YEMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.b7d2b89e.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => {\n  return(\n    <div className=\"header\">\n      <h1 className=\"title\">Cool Pics</h1>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Pics = (props) => {\n  const {pics} = props\n    return(\n      <div className=\"pics__container\">\n        <ul className=\"pics__list\">\n        {pics.map(item => {\n          return(\n            <li className=\"pic__item\" key={item.id}>\n              <img className=\"pic__img\" src={item.download_url} alt={`Picture of:${item.author}`}/>\n              <h2 className=\"pic__author\">{item.author}</h2>\n            </li>\n          )\n        })} \n        </ul>\n      </div>\n    );\n}\n\nPics.propTypes = {\n  pics: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default Pics;","import React from 'react';\nimport { fetchPics } from './services/fetchPics'\nimport Header from './Components/Header';\nimport Pics from './Components/Pics'\nimport './scss/App.scss';\n\nclass App extends  React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      pics:[],\n      nRandom:''\n    }\n    this.getPics = this.getPics.bind(this);\n    this.getRandom = this.getRandom.bind(this);\n  }\n  componentDidMount(){\n    this.getRandom()\n  }\n  getRandom(){\n    const newNRandom=  Math.random() * (31 - 10) + 10;\n    this.setState({\n      nRandom:newNRandom\n    },()=>{this.getPics()})\n  }\n\n  getPics(){\n    const ENDPOINT =`https://picsum.photos/v2/list?page=${parseInt(this.state.nRandom)}&limit=10`;\n    console.log(ENDPOINT)\n    fetchPics(ENDPOINT)\n    .then(data=>{\n      this.setState({\n        pics:data\n      },()=>{console.log(this.state.pics)})\n    })\n  }\n  \n  render(){\n    const {pics}=this.state;\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <main>\n          <Pics pics={pics}></Pics>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const fetchPics = (url) => fetch( url ).then(response => response.json());\n\nexport {fetchPics}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}